name: Sync Upstream Dev Branch

on:
  schedule:
    # Run every day at 11:00 PM UTC (end of day)
    - cron: "0 23 * * *"
  workflow_dispatch: # Allow manual triggering

jobs:
  sync-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Add upstream remote
        run: |
          git remote add upstream https://github.com/blakeblackshear/frigate.git || true
          git remote set-url upstream https://github.com/blakeblackshear/frigate.git

      - name: Fetch upstream changes
        run: |
          git fetch upstream
          git fetch origin

      - name: Check if upstream/dev has new commits
        id: check_changes
        run: |
          # Get the latest commit hash from upstream/dev
          UPSTREAM_HASH=$(git rev-parse upstream/dev)

          # Get the latest commit hash from origin/main
          ORIGIN_HASH=$(git rev-parse origin/main)

          # Check if they're different
          if [ "$UPSTREAM_HASH" != "$ORIGIN_HASH" ]; then
            echo "changes_detected=true" >> $GITHUB_OUTPUT
            echo "upstream_hash=$UPSTREAM_HASH" >> $GITHUB_OUTPUT
            echo "origin_hash=$ORIGIN_HASH" >> $GITHUB_OUTPUT
          else
            echo "changes_detected=false" >> $GITHUB_OUTPUT
          fi

          # Check if there are commits in upstream/dev that aren't in origin/main
          BEHIND_COUNT=$(git rev-list --count origin/main..upstream/dev)
          echo "behind_count=$BEHIND_COUNT" >> $GITHUB_OUTPUT

      - name: Create sync branch
        if: steps.check_changes.outputs.changes_detected == 'true' && steps.check_changes.outputs.behind_count != '0'
        run: |
          BRANCH_NAME="sync-upstream-dev-$(date +%Y%m%d-%H%M%S)"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

          # Create and switch to new branch from main
          git checkout -b "$BRANCH_NAME" origin/main

          # Try to merge upstream/dev
          if git merge upstream/dev --no-edit; then
            echo "MERGE_SUCCESS=true" >> $GITHUB_ENV
          else
            echo "MERGE_SUCCESS=false" >> $GITHUB_ENV
            # If merge fails, we'll still create the PR but with conflict markers
            git add .
            git commit -m "Sync with upstream/dev - merge conflicts need resolution"
          fi

      - name: Push sync branch
        if: steps.check_changes.outputs.changes_detected == 'true' && steps.check_changes.outputs.behind_count != '0'
        run: |
          git push origin "$BRANCH_NAME"

      - name: Create Pull Request
        if: steps.check_changes.outputs.changes_detected == 'true' && steps.check_changes.outputs.behind_count != '0'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ env.BRANCH_NAME }}
          base: main
          title: "üîÑ Sync with upstream dev branch"
          body: |
            ## Automated Sync with Upstream

            This PR was automatically created to sync your fork with the upstream dev branch.

            **Details:**
            - **Upstream commits**: ${{ steps.check_changes.outputs.behind_count }} new commits
            - **Upstream hash**: `${{ steps.check_changes.outputs.upstream_hash }}`
            - **Current main hash**: `${{ steps.check_changes.outputs.origin_hash }}`
            - **Merge status**: ${{ env.MERGE_SUCCESS == 'true' && '‚úÖ Clean merge' || '‚ö†Ô∏è Merge conflicts detected' }}

            ${{ env.MERGE_SUCCESS == 'false' && '### ‚ö†Ô∏è Action Required\n\nThis PR contains merge conflicts that need to be resolved manually. Please review the conflicts and resolve them before merging.' || '### ‚úÖ Ready to Merge\n\nThis PR contains a clean merge of the upstream changes and should be safe to merge.' }}

            **Recent upstream changes:**

            ---
            *This PR was automatically created by the sync-upstream workflow.*
          labels: |
            automated
            sync
            upstream
          draft: ${{ env.MERGE_SUCCESS == 'false' }}

      - name: Comment on existing PR if no changes
        if: steps.check_changes.outputs.changes_detected == 'false'
        run: |
          echo "No new changes detected in upstream/dev branch. Your fork is up to date!"

      - name: Summary
        run: |
          if [ "${{ steps.check_changes.outputs.changes_detected }}" == "true" ] && [ "${{ steps.check_changes.outputs.behind_count }}" != "0" ]; then
            echo "‚úÖ Created PR to sync ${{ steps.check_changes.outputs.behind_count }} new commits from upstream/dev"
          else
            echo "‚ÑπÔ∏è No sync needed - your fork is up to date with upstream/dev"
          fi
